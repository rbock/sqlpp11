#pragma once

// generated by ../../sqlpp11/scripts/ddl2cpp -fail-on-parse BlobSample.sql BlobSample blob

#include <sqlpp11/char_sequence.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/table.h>

namespace BlobSample_
{
  struct Id
  {
    struct _alias_t
    {
      static constexpr const char _literal[] = "id";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template <typename T>
      struct _member_t
      {
        T id;
        T& operator()()
        {
          return id;
        }
        const T& operator()() const
        {
          return id;
        }
      };
    };
    using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
  };
  struct Data
  {
    struct _alias_t
    {
      static constexpr const char _literal[] = "data";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template <typename T>
      struct _member_t
      {
        T data;
        T& operator()()
        {
          return data;
        }
        const T& operator()() const
        {
          return data;
        }
      };
    };
    using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::can_be_null>;
  };
}  // namespace BlobSample_

struct BlobSample : sqlpp::table_t<BlobSample, BlobSample_::Id, BlobSample_::Data>
{
  struct _alias_t
  {
    static constexpr const char _literal[] = "blob_sample";
    using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
    template <typename T>
    struct _member_t
    {
      T blobSample;
      T& operator()()
      {
        return blobSample;
      }
      const T& operator()() const
      {
        return blobSample;
      }
    };
  };
};
